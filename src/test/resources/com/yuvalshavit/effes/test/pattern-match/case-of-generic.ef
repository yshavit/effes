type Empty
type Node[T](head: T, tail: Node[T] | Empty)

type TrueNode
type FalseNode
type Boolean = True | False

describe (in: Node[True] | Node[False] | Boolean) -> TrueNode | FalseNode | Boolean:
  return case in of
    Node[True](head, tail): TrueNode
    Node[False](head, tail): FalseNode
    True: True
    False: False

main:
  print describe Node[True](True, Empty)
  print describe Node[False](False, Empty)
  print describe True
