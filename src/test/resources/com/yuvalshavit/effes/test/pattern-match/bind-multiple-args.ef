type TwoArgs(v: Void, shouldPrint: True | False)

sayHi (value: Void), (vocal: True | False) -> Void:
  return case vocal of
    True: print value
    False: Void

foo (t: TwoArgs | Void) -> True | False | Void:
  return case t of
    Void: Void
    TwoArgs(val, shouldPrint): sayHi val [shouldPrint]

main -> Void:
  t = TwoArgs(Void, True)
  f = TwoArgs(Void, False)
  foo t
  foo f
  return Void
